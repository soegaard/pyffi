# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Environment variables
env:
  PYTHONPATH: "/opt/hostedtoolcache/Python/3.10.7/x64/"
  # PYTHONPATH: "/opt/hostedtoolcache/Python/3.10.7/x64/lib/"
  # PYTHONPATH: "/opt/hostedtoolcache/Python/3.10.7/x64/lib/python3.10"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Install Python 3.10
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      # Python Diagnostics - Sysconfig
      - name: Python Diagnostics
        run: python3 -m sysconfig
      # Python Diagnostics - Sysconfig
      - name: Python Diagnostics - Is libpython to be found?
        run: python3 -c 'from distutils.sysconfig import get_config_var; print(get_config_var("LDLIBRARY"))'
      # Python Diagnostics - Names of modules in standard library
      - name: Python Diagnostics - Names of modules in standard library
        run: python3.10 -c "import sys ; print(sorted(sys.stdlib_module_names))"
      # Python Diagnostics - Names of builtin modules
      - name: Python Diagnostics - Names of builtin modules
        run: python3.10 -c "import sys ; print(sorted(sys.builtin_module_names))"
      # Python Diagnostics - Traceback
      - name: Python Diagnostics (traceback)
        run: |
              python3 -c "import traceback"
              echo "DATA"        
              # /Users/runner/hostedtoolcache/Python/3.10.7/x64  # macos
              ls /opt/hostedtoolcache/Python/3.10.7/x64          # ubuntu
              echo "LIBS"
              ls /opt/hostedtoolcache/Python/3.10.7/x64/lib/python3.10
      # Python Diagnostics - PYTHONPATH
      - name: Python Diagnostics (PYTHONPATH)
        run: ls $PYTHONPATH

      # Install Racket
      - name: Install Racket
        uses: Bogdanp/setup-racket@v1.8.1
        with:
          architecture: 'x64'
          distribution: 'full'
          variant: 'CS'
          version: '8.4'
          dest: '"${HOME}/racketdist"'
          local_catalogs: $GITHUB_WORKSPACE
          sudo: never
      # Package Installation (pyffi-lib)
      - name: Package Installation - Local Packages
        run: raco pkg install --scope installation pyffi-lib
      # Configure Pyffi
      - name: Configure Pyffi
        run: |
             raco pyffi configure
             raco pyffi show
             raco pyffi diagnostics
      # Test Program
      # - name: Test Program
      #  run: raco pyffi test
      # Package Installation (pyffi-doc)
      - name: Package Installation (pyffi-doc)
        run: raco pkg install --scope installation pyffi-doc
      # Setup Local Packages
      - name: Setup Collections
        run: raco setup -v --check-pkg-deps pyffi
      - name: Build documentation with raco scribble
        run: |
             cd ..
             pwd
             ls -r *        
             xvfb-run -a raco scribble +m --redirect-main http://pkg-build.racket-lang.org/doc/ --htmls --dest ./htmls pyffi-doc/pyffi/manual-pyffi.scrbl
